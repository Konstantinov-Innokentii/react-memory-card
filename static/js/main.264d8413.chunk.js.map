{"version":3,"sources":["components/card.jsx","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","nextProps","nextState","nextContext","card","isOpen","props","isMatched","_this","react_default","a","createElement","className","onClick","e","onCardClick","Fragment","src","concat","suit","alt","Component","VALS","SUITS","Game","call","closeCards","setState","prevState","cards","map","objectSpread","locked","startNewGame","_this2","gameStage","getCards","points","setTimeout","bind","assertThisInitialized","state","clickedCardIndex","_","findIndex","id","openedCard","openedCardIndex","_this3","isEqual","matchedPairs","undefined","i","rand_value","Math","floor","random","length","rand_suit","push","uuid","array","temporaryValue","randomIndex","currentIndex","shuffle","_this4","_this5","card_Card","App","game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.264d8413.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nexport class Card extends Component{\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return nextProps.card.isOpen != this.props.card.isOpen || nextProps.card.isMatched != this.props.card.isMatched\n    }\n\n    render() {\n        return (\n            <div className={this.props.card.isMatched ? \"card-matched\" : \"card\" } onClick={e => this.props.onCardClick(e, this.props.card)}>\n                {this.props.card.isOpen && <>\n                    <img src={`/img/${this.props.card.value+this.props.card.suit}.png`} alt={`${this.props.card.value+this.props.card.suit}`}/>\n                </>}\n                {\n                    !this.props.card.isOpen &&\n                    <img src='/img/RedBack.png' alt='card back'/>\n                }\n            </div>\n        )\n    }\n\n}","import React, {Component} from 'react';\nimport _ from 'lodash'\nimport {Card} from \"./card\";\nimport uuid from 'uuid'\n\n\nconst VALS = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nconst SUITS = ['D', 'H', 'S', 'C'];\n\n\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\n// при образовании пары прибавляется число нераскрытых пар, умноженное на 42;\n// при несовпадении пары вычитается число раскрытых пар, умноженное на 42.\n\n\nexport class Game extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {gameStage: 1, cards: this.getCards(), openedCard: undefined, points: 0, locked: true, matchedPairs: 0}\n    }\n\n    closeCards = function () {\n        this.setState(prevState => ({cards: prevState.cards.map(card => {return {...card, isOpen: false}}), locked: false}))\n    };\n\n    getCards(){\n        let cards = [];\n        for (let i = 0; i < 9; i++) {\n            let rand_value = Math.floor(Math.random() * VALS.length);\n            let rand_suit = Math.floor(Math.random() * SUITS.length);\n            cards.push({value: VALS[rand_value], suit: SUITS[rand_suit], isOpen: true, id: uuid(), isMatched: false});\n            cards.push({value: VALS[rand_value], suit: SUITS[rand_suit], isOpen: true, id: uuid(), isMatched: false})\n        }\n        cards = shuffle(cards);\n        return cards\n    }\n\n\n    startNewGame = function () {\n        this.setState({gameStage: 1, cards: this.getCards(), locked: false, points: 0});\n        setTimeout(() => this.closeCards(), 5000);\n    }.bind(this);;\n\n\n    onCardClick = function (e, card) {\n\n        if (this.state.locked || card.isMatched) {\n            return\n        }\n\n        let cards = this.state.cards;\n        let points = this.state.points;\n        const clickedCardIndex = _.findIndex(cards, {id: card.id});\n        if (!card.isOpen) {\n\n            if (this.state.openedCard) {\n                cards[clickedCardIndex] = {...card, isOpen: true};\n                const openedCardIndex = _.findIndex(cards, {id: this.state.openedCard.id});\n\n                this.setState({locked: true, cards: cards}, function () {\n                    if (_.isEqual({value: this.state.openedCard.value, suit: this.state.openedCard.suit},\n                        {value: card.value, suit: card.suit}) && this.state.openedCard.id != card.id) {\n                        cards[openedCardIndex] = {...this.state.openedCard, isMatched: true};\n                        cards[clickedCardIndex] = {...card, isMatched: true};\n\n                        setTimeout(() => {\n                                this.setState(prevState => ({\n                                    gameStage: prevState.matchedPairs == 8 ? 2 : 1,\n                                    openedCard: null,\n                                    cards: cards,\n                                    locked: prevState.matchedPairs == 8 ? true : false,\n                                    points: prevState.points + (9 - prevState.matchedPairs) * 42,\n                                    matchedPairs: prevState.matchedPairs + 1\n                                }))\n                            }\n                            , 1000);\n                    } else {\n                        cards[openedCardIndex] = {...this.state.openedCard, isOpen: false};\n                        cards[clickedCardIndex] = {...card, isOpen: false};\n\n\n                        setTimeout(() => this.setState(prevState=> ({cards: cards, locked: false, openedCard: undefined, points: prevState.points - (9-prevState.matchedPairs)*42})), 1500);\n                    }\n                });\n\n            } else {\n                const clickedCardIndex = _.findIndex(cards, {id: card.id});\n                cards[clickedCardIndex] = {...card, isOpen: true};\n                this.setState({cards: cards, openedCard: card});\n            }\n        }\n    }.bind(this);\n\n    componentDidMount() {\n        setTimeout(() => this.closeCards(), 5000);\n    }\n\n    render() {\n        return (\n            <div className=\"table__wrapper\">\n                <h2 className='points'>{this.state.points}</h2>\n            <div className='table'>\n                {this.state.gameStage == 2 && <button className={'btn__new_game'} onClick={this.startNewGame}>New Game</button>}\n                {this.state.gameStage == 1 && this.state.cards.map(card => <Card key={card.id} card={card} onCardClick={this.onCardClick}/>)}\n            </div>\n            </div>\n        )\n    }\n\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {Game} from \"./components/game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}